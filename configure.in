dnl Process this file with autoconf to produce a configure script.

AC_INIT(phred, 0.1.0)
AC_CANONICAL_SYSTEM

dnl Every other copy of the package version number gets its value from here
AM_INIT_AUTOMAKE(phred, 0.1.0)

AM_MAINTAINER_MODE

dnl create a config.h file (Automake will add -DHAVE_CONFIG_H)
AM_CONFIG_HEADER(src/config.h)

AC_SUBST(VERSION)

ISODATE=`date +%Y-%m-%d`
AC_SUBST(ISODATE)

dnl Optional programs
AC_ARG_WITH(vtk, AC_HELP_STRING([--without-vtk], [Don't use the VTK library]))

AC_ARG_WITH(netcdf, AC_HELP_STRING([--without-netcdf], [Don't use NetCDF library]))

AC_ARG_WITH(hdf5, AC_HELP_STRING([--without-hdf5], [Don't use the HDF5 library]))

AC_ARG_WITH(hdf, AC_HELP_STRING([--with-hdf], [Use the HDF4 library]))

AC_ARG_WITH(doubleprecision, AC_HELP_STRING([--with-double-precision], [Uses doubles (64-bits) instead of floats (32 bits) for field quantities. Double precision won't work with the AltiVec engine.]))

dnl Data type variables
FIELD_TYPE="float"
MPIFIELD_TYPE="MPI_FLOAT"

dnl options
WANT_DEBUG=
AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug], [Enable debugging messages, turn on assertions and array bounds checking]), WANT_DEBUG=1)

AC_ARG_WITH(cxx, AC_HELP_STRING([--with-cxx=CXX], [C++ compiler to use]), 
		 [CXX="$withval"])

WANT_PROFILE=
AC_ARG_ENABLE(profile, AC_HELP_STRING([--enable-profile], [Compile with -pg flag for gprof support.]), [WANT_PROFILE=1])

WANT_OPENMP=
AC_ARG_ENABLE(openmp, AC_HELP_STRING([--enable-openmp], [Use OpenMP directives for SMP shared memory parallism]), [WANT_OPENMP=1])

WANT_ALTIVEC=0
AC_ARG_ENABLE(altivec, AC_HELP_STRING([--enable-altivec], [Use AltiVec instructions on G4 and G5 processors]), [WANT_ALTIVEC=1], [WANT_ALTIVEC=0])

WANT_TIMING_TESTS=0
AC_ARG_ENABLE(ctests, AC_HELP_STRING([--enable-tests], [Build C timing tests]), [WANT_TIMING_TESTS=1], [WANT_TIMING_TESTS=0])
AM_CONDITIONAL(WANT_TIMING_TESTS, test "x$WANT_TIMING_TESTS" = "x1")

# Stolen in part from the LAM MPI configure.in file
if test "$with_cxx" = yes; then
   AC_MSG_ERROR(--with-cxx requires the C++ compiler name)
fi

dnl Checks for programs.
AC_PROG_INSTALL
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_YACC
AM_PROG_LEX
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AC_PROG_RANLIB

dnl Check for compiler things
AC_C_INLINE
AC_C_BIGENDIAN

dnl Generate python scripting support?
AC_ARG_WITH(python, AC_HELP_STRING([--with-python], [Generate Python scripting support]))
AC_ARG_WITH(python_libs, AC_HELP_STRING([--with-python-libs], [Location of Python libraries]))
AC_ARG_WITH(python_includes, AC_HELP_STRING([--with-python-includes], [Location of Python include files]))

AC_ARG_WITH(boost_libs, AC_HELP_STRING([--with-boost-libs], [Location of boost libraries]))
AC_ARG_WITH(boost_includes, AC_HELP_STRING([--with-boost-includes], [Location of boost include files]))

AC_ARG_WITH(readline, AC_HELP_STRING([--without-readline], [Don't use readline for Python interactive mode. Interactive mode will be restricted to single node execution.]))

dnl DX_INIT_DOXYGEN([phred])

dnl Is doxygen availble to generate documentation? 
AC_CHECK_PROG([DOXYGEN], [doxygen], [doxygen], [])
AC_ARG_VAR([DOXYGEN], [Indicates if doyxgen is availble to generate documentation.])
AM_CONDITIONAL(WANT_DOCS, test ! -z $DOXYGEN)

dnl Is dot from graphviz available? For doxygen class diagrams
AC_CHECK_PROG([DOT], [dot], [YES], [NO])
AC_ARG_VAR([DOT], [Set to YES if dot from the graphviz package is available for doxygen to use])

AC_LANG(C++)

dnl Use popt? 
AC_ARG_WITH(popt, AC_HELP_STRING([--without-popt], [Don't use popt for handling command line arguments]))

dnl Various MPI implementations we can use. We can usually assume that the 
dnl compiler command script adds the right libraries and include paths, 
dnl so there is no need to worry if no mpi library is specified. 
AC_ARG_WITH(mpi_libs, AC_HELP_STRING([--with-mpi-libs], [Location of MPI libraries]), [MPI_LIBS=$withval])

AC_ARG_WITH(mpi_includes, AC_HELP_STRING([--with-mpi-includes], [Location of MPI include files]), [MPI_INCLUDES=$withval])

dnl Checks for a MPI library.
if [[ ! -z $MPI_LIBS ]]; then 
   MPI_LIBS="-L$MPI_LIBS"
fi

dnl HMMMMMM!
dnl If AC_CHECK_LIB suceeds, it must not be allowed to prepend -lmpi because
dnl the compiler script takes care of that. 
dnl AC_CHECK_LIB(mpi, MPI_Init, [false], [
dnl        AC_MSG_ERROR([*** Can't find an MPI library. Specify correct compiler scipt. ])],
dnl        ["$MPI_LIBS"])

if [[ ! -z $MPI_INCLUDES ]]; then
   CPPFLAGS="$CPPFLAGS -I$MPI_INCLUDES"
fi

AC_CHECK_HEADER(mpi.h, [], [
        AC_MSG_ERROR([*** Can't find any MPI header files. ])])


if [[ ! "$with_popt" = "no" ]]; then
        AC_DEFINE([USE_POPT], [1], [Use the popt library])
        AC_CHECK_LIB(popt, poptGetContext, [], [])
        AC_CHECK_HEADER([popt.h], [], [])
fi

if [[ ! "$with_vtk" = "no" ]]; then 
AC_CHECK_LIB(vtkIO, vtkInstantiatorvtkXMLStructuredGridReaderNew, [
    LIBS="-lvtk $LIBS";
    AC_CHECK_HEADER([vtk.h], [
        USE_VTK="1"
        AC_DEFINE([USE_VTK], [1], [Use VTK as a DataWriter])], [], 
                  [])], [], [])
fi 

if [[ ! "$with_netcdf" = "no" ]]; then 
AC_CHECK_LIB(netcdf, ncopen, [
    LIBS="-lnetcdf $LIBS";
    AC_CHECK_HEADER([netcdf.h], [
        USE_NETCDF="1"
        AC_DEFINE([USE_NETCDF], [1], [Use netCDF as a DataWriter])], [], 
                  [$with_netcdf_includes])], [], [$with_netcdf_libs])
fi 

if [[ "$with_hdf" = "yes" ]]; then 
AC_CHECK_LIB(mfhdf, hdf_close, [
    LIBS="-lmfhdf -ldf -ljpeg -lz $LIBS"
    AC_CHECK_HEADER([hdf.h], [
        USE_HDF4="1"
        AC_DEFINE([USE_HDF4], [1], [Use HDF4 as a DataWriter])], [], 
                  [$with_hdf4_includes])], [], [-ldf -ljpeg -lz])

if [[ ! "$with_netcdf" = "no" ]]; then 
AC_MSG_WARN([Using HDF and NetCDF together may not work; they have clashing symbols.])
fi
fi

if [[ ! "$with_hdf5" = "no" ]]; then 
AC_CHECK_LIB(hdf5, H5open, [
    LIBS="-lhdf5 $LIBS";
    AC_CHECK_HEADER([hdf5.h], [
        USE_HDF5="1"
        AC_DEFINE([USE_HDF5], [1], [Use HDF5 as a DataWriter])], [], 
                  [$with_hdf5_includes])], [], [$with_hdf5_libs])
fi

dnl Setup scripting
USE_PY_BINDINGS=0
PYTHON_LDFLAGS=""
if [[ ! -z "$with_python" ]] || [[ ! -z "$with_python_libs" ]] || [[ ! -z "$with_python_includes" ]]; then
        PYTHON_LDFLAGS=`echo "import distutils.sysconfig; print distutils.sysconfig.get_config_var('LINKFORSHARED')" | python -`

        CXXFLAGS="$CXXFLAGS $PYTHON_LD_FLAGS"

        if [[ ! -z "$with_python_includes" ]]; then 
          CPPFLAGS="$CPPFLAGS -I$with_python_includes"
        fi

        if [[ "$target_vendor" = "apple" ]]; then
            AC_MSG_CHECKING([for Apple's Python framework])
            AC_COMPILE_IFELSE([
#include <Python.h>
void test()
{
Py_Initialize();
}
], [AC_MSG_RESULT([yes])], [AC_MSG_ERROR(*** Can't find Apple's Python framework.)])
        else

	PY_LIBS=""
	if [[ ! -z "$with_python_libs" ]]; then 
		PY_LIBS="-L$with_python_libs"
	fi

        AC_CHECK_LIB(python2.3, Py_Initialize, [], [
            AC_MSG_ERROR(*** Can't find the Python libraries.)],
            [$PY_LIBS])
        fi

        AC_CHECK_HEADER([Python.h], [], [AC_MSG_ERROR([*** Can't find the Python header files])])

        if [[ ! -z "$with_boost_includes" ]]; then
            CPPFLAGS="$CPPFLAGS -I$with_boost_includes"
        fi

	OLD_CXX=$CXX
	OLD_CXXCPP=$CXXCPP
	CXXCPP="g++ -E"
	CXX="g++"

        AC_CHECK_HEADER([boost/python.hpp], [], [AC_MSG_ERROR([*** Can't find the Boost Python header files])])

	BOOST_LIBS=""
	if [[ ! -z "$with_boost_libs" ]]; then
		BOOST_LIBS="-L$with_boost_libs"
	fi

dnl        AC_CHECK_LIB(boost_python, PyBaseObject_Type, [], [
dnl            AC_MSG_ERROR(*** Can't find the Boost Python library.)], 
dnl            [$BOOST_LIBS])

	LIBS="$LIBS -lboost_python"
	CXXFLAGS="$CXXFLAGS $BOOST_LIBS"

	CXX=$OLD_CXX
	CXXCPP=$OLD_CXXCPP

        USE_PY_BINDINGS=1
        AC_DEFINE([USE_PY_BINDINGS], [1], [Use Python bindings])

dnl Use readline? 
        if test ! "$with_readline" = "no"; then
        AC_CHECK_LIB(readline, readline, [], [])
        AC_CHECK_HEADER([readline/readline.h], [], [])
        fi
fi
AM_CONDITIONAL(PY_BINDINGS, test "x$USE_PY_BINDINGS" = "x1")

dnl Debug?
dnl CFLAGS=
dnl CXXFLAGS=
if test "x$WANT_DEBUG" = "x1"; then
        AC_DEFINE([DEBUG], [1], [Turn on debugging messages])
        AC_LANG_WERROR
        CXXFLAGS="-g"
else
        AC_DEFINE([NDEBUG], [1], [Turn off assertions])
        CXXFLAGS="-O2"
fi

dnl Profile?
if test "x$WANT_PROFILE" = "x1"; then
        AC_DEFINE([PROFILE], [1], [Using profiling (-pg)])
        CXXFLAGS="$CXXFLAGS -pg"
fi

dnl Use OpenMP parallism? Does the compiler support it? Are the 
dnl libraries available? 
if test "x$WANT_OPENMP" = "x1"; then
dnl        AC_MSG_WARN([OpenMP support is not fully implemented yet. ])
        AC_MSG_CHECKING([for OpenMP support])
        CXXFLAGS_TEMP="$CXXFLAGS"
        AC_LANG_PUSH(C++)
        CXXFLAGS="-qSMP=omp"        
        AC_COMPILE_IFELSE([
void test() {
int i = 0, j = 0;
#pragma omp parallel
#pragma omp for reduction(+:j)
for (i = 0; i < 100; i++)
  j += i;
}], [
        AC_MSG_RESULT([yes])
        USE_OPENMP="1"
        AC_DEFINE([USE_OPENMP], [1], [Using OpenMP (-qSMP=omp on AIX)])
        CXXFLAGS_TEMP="$CXXFLAGS_TEMP -qSMP=omp"], [
        AC_LANG_POP(C++)
        CXXFLAGS="$CXXFLAGS_TEMP"
        AC_MSG_RESULT([no])
        AC_MSG_ERROR([OpenMP is not supported by the compiler.])])
fi

dnl Use double precision?
if test "x$with_doubleprecision" = "xyes"; then
if test "x$WANT_ALTIVEC" = "x1"; then
   AC_MSG_ERROR([Cannot use double precision and Altivec together.])
fi
   FIELD_TYPE="double"
   MPIFIELD_TYPE="MPI_DOUBLE"
fi

AC_ARG_VAR([FIELD_TYPE], [Data type to use for field quantities.])
AC_ARG_VAR([MPIFIELD_TYPE], [MPI data type to use for field quantities.])

dnl Use AlitVec instructions on G4 and G5 processors? Compiler support? 
dnl Libraries? 
if test "x$WANT_ALTIVEC" = "x1"; then
        if test "$target_cpu" = "powerpc"; then 
            AC_MSG_WARN([AltiVec support is not implemented yet.])
            AC_MSG_CHECKING([for AltiVec support])
            AC_COMPILE_IFELSE([
void test()
{}
], [
        AC_MSG_RESULT([yes])
        USE_ALTIVEC="1"
        CFLAGS="$CFLAGS -faltivec"
        AC_DEFINE([USE_ALTIVEC], [1], [Using AltiVec])
        ], [AC_MSG_RESULT[no]])
            
        else
            AC_MSG_WARN([AltiVec support is only available on G4 and G5 powerpc processors!])
        fi
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h sys/param.h sys/time.h time.h sys/mkdev.h sys/sysmacros.h string.h memory.h fcntl.h dirent.h sys/ndir.h ndir.h alloca.h locale.h )


AC_HEADER_MAJOR
AC_FUNC_ALLOCA
AC_STRUCT_TM
AC_STRUCT_ST_BLOCKS
AC_FUNC_CLOSEDIR_VOID

dnl Checks for typedefs, structures, and compiler characteristics.
if test "$CXX" = "mpCC" || test "$CXX" = "mpCC_r" || test "$CXX" = "xlC" || test "$CXX" = "xlC_r"; then
dnl Turn on inlining, template registry, RTTI, 2 GB memory access
   CXXFLAGS="$CXXFLAGS -Q -qtemplateregistry -qrtti=all -bmaxdata:0x80000000"
fi
dnl Checks for library functions.

AC_SUBST(CFLAGS, $CFLAGS)
AC_SUBST(CXXFLAGS, $CXXFLAGS)
AC_SUBST(LIBS, $LIBS)
AC_SUBST(PYTHON_LDFLAGS, $PYTHON_LDFLAGS)

AC_OUTPUT(Makefile src/Makefile src/python-bindings/Makefile doc/Makefile tests/Makefile tests/high_speed_c/Makefile src/Types.hh doc/Doxyfile doc/phred.lsm phred.spec)


dnl Display a summary of results
echo "Configured $PACKAGE_NAME $PACKAGE_VERSION"
echo
echo "C++ compiler: $CXX"
echo "C compiler: $CC"
echo "C++ compiler flags: $CXXFLAGS"
echo "C compiler flags: $CFLAGS"
echo
echo -n "Using popt to parse command line arguments? "
if test "x$HAVE_LIBPOPT" = "x1"; then echo "yes"; else echo "no"; fi
echo
echo "DataWriters: " 
echo -n " - NetCDF? " 
if test "x$USE_NETCDF" = "x1"; then echo "yes"; else echo "no"; fi
echo -n " - HDF 4? " 
if [[ "x$USE_HDF4" = "x1" ]]; then echo "yes"; else echo "no"; fi
echo -n " - HDF 5? " 
if [[ "x$USE_HDF5" = "x1" ]]; then echo "yes"; else echo "no"; fi
echo -n " - VTK? " 
if [[ "x$USE_VTK" = "x1" ]]; then echo "yes"; else echo "no"; fi
echo
echo -n "Building AltiVec support? " 
if [[ "x$USE_ALTIVEC" = "x1" ]]; then echo "yes"; else echo "no"; fi
echo -n "Using OpenMP parallization? " 
if [[ "x$USE_OPENMP" = "x1" ]]; then echo "yes"; else echo "no"; fi
echo
echo -n "Building Python bindings? " 
if [[ "x$USE_PY_BINDINGS" = "x1" ]]; then 
  echo "yes"; 
  echo -n "Using readline for interactive Python? "
  if [[ ! "$with_readline" = "no" ]]; then echo "yes"; else echo "no"; fi
else 
  echo "no"; 
fi
echo -n "Building a parser for Jan's input files? "
if test ! -z "$LEX" && test ! -z "$YACC"; then echo "yes"; else echo "no"; fi
echo
echo "Field components will use $FIELD_TYPE."
echo
echo -n "Build type: "
if test "x$WANT_DEBUG" = "x1"; then echo "debugging"; else echo "optimized"; fi
echo -n "Profiling? " 
if test "x$WANT_PROFILE" = "x1"; then echo "yes"; else echo "no"; fi
echo
echo "$PACKAGE_NAME is ready to be built. Type 'make'."
