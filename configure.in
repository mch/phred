dnl Process this file with autoconf to produce a configure script.

AC_INIT(phred, 0.1.0)
dnl Every other copy of the package version number gets its value from here
AM_INIT_AUTOMAKE(phred, 0.1.0)

AM_MAINTAINER_MODE

dnl create a config.h file (Automake will add -DHAVE_CONFIG_H)
AM_CONFIG_HEADER(src/config.h)

AC_SUBST(VERSION)

ISODATE=`date +%Y-%m-%d`
AC_SUBST(ISODATE)

AC_CANONICAL_HOST

dnl options
WANT_DEBUG=
AC_ARG_ENABLE(debug, [  --enable-debug          Enable debugging messages, turn on assertions
                          and array bounds checking ], WANT_DEBUG=1)

AC_ARG_WITH(cxx, AC_HELP_STRING([--with-cxx=CXX], [C++ compiler to use]), 
		 [CXX="$withval"])

WANT_PROFILE=
AC_ARG_ENABLE(profile, AC_HELP_STRING([--enable-profile], [Compile with -pg flag for gprof support.]), [WANT_PROFILE=1])

WANT_OPENMP=
AC_ARG_ENABLE(openmp, AC_HELP_STRING([--enable-openmp], [Use OpenMP directives for SMP shared memory parallism]), [WANT_OPENMP=1])

# Stolen in part from the LAM MPI configure.in file
if test "$with_cxx" = yes; then
   AC_MSG_ERROR(--with-cxx requires the C++ compiler name)
fi

dnl Checks for programs.
AC_PROG_INSTALL
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_MAKE_SET

dnl Use SWIG to generate python scripting support?
AC_ARG_WITH(python, AC_HELP_STRING([--with-python], [Generate Python scripting support]))
AC_ARG_WITH(python_libs, AC_HELP_STRING([--with-python-libs], [Location of Python libraries]))
AC_ARG_WITH(python_includes, AC_HELP_STRING([--with-python-includes], [Location of Python include files]))


dnl DX_INIT_DOXYGEN([phred])

dnl Is doxygen availble to generate documentation? 
AC_CHECK_PROG([DOXYGEN], [doxygen], [doxygen], [])
AC_ARG_VAR([DOXYGEN], [Indicates if doyxgen is availble to generate documentation.])

dnl Is dot from graphviz available? For doxygen class diagrams
AC_CHECK_PROG([DOT], [dot], [YES], [NO])
AC_ARG_VAR([DOT], [Set to YES if dot from the graphviz package is available for doxygen to use])

AC_LANG(C++)

dnl Use popt? 
AC_ARG_WITH(popt, AC_HELP_STRING([--without-popt], [Don't use popt for handling command line options (the executable will only accept an option file)]))

dnl netCDF support? 
AC_ARG_WITH(netcdf-libs, AC_HELP_STRING([--with-netcdf-libs], [Location of netCDF libraries]))

AC_ARG_WITH(netcdf-includes, AC_HELP_STRING([--with-netcdf-includes], [Location of netCDF include files]))

dnl HDF support? 
AC_ARG_WITH(hdf4-libs, AC_HELP_STRING([--with-hdf4-libs], [Location of HDF 4 libraries]))

AC_ARG_WITH(hdf4-includes, AC_HELP_STRING([--with-hdf4-includes], [Location of HDF 4 include files]))

AC_ARG_WITH(hdf5-libs, AC_HELP_STRING([--with-hdf5-libs], [Location of HDF 5 libraries]))

AC_ARG_WITH(hdf5-includes, AC_HELP_STRING([--with-hdf5-includes], [Location of HDF 5 include files]))

dnl Various MPI implementations we can use. We can usually assume that the 
dnl compiler command script adds the right libraries and include paths, 
dnl so there is no need to worry if no mpi library is specified. 
AC_ARG_WITH(lammpi, 
            AC_HELP_STRING([--with-lammpi], [Use LAM/MPI for message passing]),
            [LAMMPI=1], [LAMMPI=0])

AC_ARG_WITH(lammpi_libs, [  --with-lammpi-libs      Location of LAM/MPI libraries], [LAMMPI_LIBS=$withval])

AC_ARG_WITH(lammpi_includes, [  --with-lammpi-includes  Location of LAM/MPI include files], [LAMMPI_INCLUDES=$withval])



AC_ARG_WITH(mpich, [  --with-mpich            Use MPICH for message passing], [MPICH=1])

AC_ARG_WITH(mpich_libs, [  --with-mpich-libs       Location of MPICH libraries], [MPICH_LIBS=$withval])

AC_ARG_WITH(mpich_includes, [  --with-mpich-includes   Location of MPICH include files], [MPICH_INCLUDES=$withval])



AC_ARG_WITH(ibmpe, [  --with-ibmpe            Use IBM Parallel Environment for message passing])

AC_ARG_WITH(ibmpe_libs, [  --with-ibmpe-libs       Location of IBM/PE libraries])

AC_ARG_WITH(ibmpe_includes, [  --with-ibmpe-includes   Location of IBM/PE include files])



dnl Obviously "there can be only one" MPI library
if [[ ! -z "$with_lammpi" ]] || [[ ! -z "$with_lammpi_libs" ]] || [[ ! -z "$with_lammpi_includes" ]]; then

        if [[ ! -z "$with_mpich" ]] || [[ ! -z "$with_mpich_libs" ]] || [[ ! -z "$with_mpich_includes" ]] || [[ ! -z "$with_ibmpe" ]] || [[ ! -z "$with_ibmpe_libs" ]] || [[ ! -z "$with_ibmpe_includes" ]]; then
                AC_MSG_ERROR(There can be only one MPI libary.)
        fi
fi

if [[ ! -z "$with_mpich" ]] || [[ ! -z "$with_mpich_libs" ]] || [[ ! -z "$with_mpich_includes" ]]; then

        if [[ ! -z "$with_lammpi" ]] || [[ ! -z "$with_lammpi_libs" ]] || [[ ! -z "$with_lammpi_includes" ]] || [[ ! -z "$with_ibmpe" ]] || [[ ! -z "$with_ibmpe_libs" ]] || [[ ! -z "$with_ibmpe_includes" ]]; then
                AC_MSG_ERROR(There can be only one MPI libary.)
        fi
fi

if [[ ! -z "$with_ibmpe" ]] || [[ ! -z "$with_ibmpe_libs" ]] || [[ ! -z "$with_ibmpe_includes" ]]; then

        if [[ ! -z "$with_lammpi" ]] || [[ ! -z "$with_lammpi_libs" ]] || [[ ! -z "$with_lammpi_includes" ]] || [[ ! -z "$with_mpich" ]] || [[ ! -z "$with_mpich_libs" ]] || [[ ! -z "$with_mpich_includes" ]]; then
                AC_MSG_ERROR(There can be only one MPI libary.)
        fi
fi

dnl Debug?
CFLAGS=
CXXFLAGS=
if test "x$WANT_DEBUG" = "x1"; then
        AC_DEFINE([DEBUG], [1], [Turn on debugging messages])
        CXXFLAGS="-g -Wall"
else
        AC_DEFINE([NDEBUG], [1], [Turn off assertions])
        CXXFLAGS="-O2"
fi

dnl Profile?
if test "x$WANT_PROFILE" = "x1"; then
        AC_DEFINE([PROFILE], [1], [Using profiling (-pg)])
        CXXFLAGS="$CXXFLAGS -pg"
fi

dnl Use OpenMP parallism? Does the compiler support it? Are the 
dnl libraries available? 
if test "x$WANT_OPENMP" = "x1"; then
dnl        AC_MSG_WARN([OpenMP support is not fully implemented yet. ])
        AC_MSG_CHECKING([for OpenMP support])
        CXXFLAGS_TEMP="$CXXFLAGS"
        AC_LANG_PUSH(C++)
        CXXFLAGS="-qSMP-omp"        
        AC_COMPILE_IFELSE([
void test() {
int i = 0, j = 0;
#pragma omp parallel
#pragma omp for reduction(+:j)
for (i = 0; i < 100; i++)
  j += i;
}], [
        AC_MSG_RESULT([yes])
        AC_DEFINE([USE_OPENMP], [1], [Using OpenMP (-qSMP=omp on AIX)])
        CXXFLAGS_TEMP="$CXXFLAGS_TEMP -qSMP=omp"], [
        AC_LANG_POP(C++)
        CXXFLAGS="$CXXFLAGS_TEMP"
        AC_MSG_RESULT([no])
        AC_MSG_ERROR([OpenMP is not supported by the compiler.])])
fi

dnl Checks for libraries.
if [[ ! -z "$with_ibmpe" ]] || [[ ! -z "$with_ibmpe_libs" ]] || [[ ! -z "$with_ibmpe_includes" ]]; then
        ibmpe_LIBS=""
        ibmpe_INCLUDES=""
        if [[ ! -z "$with_ibmpe_libs" ]]; then
                ibmpe_LIBS="$with_ibmpe_libs"
        fi
        if [[ ! -z "$with_ibmpe_includes" ]]; then
                ibmpe_INCLUDES="$with_ibmpe_includes"
        fi

        AC_CHECK_LIB(mpi, MPI_Init, [], [
            AC_MSG_ERROR(*** Can't find the IBM PE MPI libraries.)],
            [-L$ibmpe_LIBS])

        CPPFLAGS="$CPPFLAGS -I$ibmpe_INCLUDES"
        AC_CHECK_HEADER(mpi.h, [], [AC_MSG_ERROR([*** Can't find the IBM PE MPI header files])])

fi

if [[ ! -z "$with_mpich" ]] || [[ ! -z "$with_mpich_libs" ]] || [[ ! -z "$with_mpich_includes" ]]; then
        mpich_LIBS=""
        mpich_INCLUDES=""
        if [[ ! -z "$with_mpich_libs" ]]; then
                mpich_LIBS="$with_mpich_libs"
        fi
        if [[ ! -z "$with_mpich_includes" ]]; then
                mpich_INCLUDES="$with_mpich_includes"
        fi

        AC_CHECK_LIB(mpi, MPI_Init, [], [
            AC_MSG_ERROR(*** Can't find the mpich libraries.)],
            [-L$mpich_LIBS])

        CPPFLAGS="$CPPFLAGS -I$mpich_INCLUDES"
        AC_CHECK_HEADER(mpi.h, [], [AC_MSG_ERROR([*** Can't find the mpich header files])])

fi

if [[ ! -z "$with_lammpi" ]] || [[ ! -z "$with_lammpi_libs" ]] || [[ ! -z "$with_lammpi_includes" ]]; then
        lammpi_LIBS=""
        lammpi_INCLUDES=""
        if [[ ! -z "$with_lammpi_libs" ]]; then
                lammpi_LIBS="$with_lammpi_libs"
        fi
        if [[ ! -z "$with_lammpi_includes" ]]; then
                lammpi_INCLUDES="$with_lammpi_includes"
        fi

        AC_CHECK_LIB(mpi, MPI_Init, [], [
            AC_MSG_ERROR(*** Can't find the LAM/MPI libraries.)],
            ["-L$lammpi_LIBS"])

        CPPFLAGS="$CPPFLAGS -I$lammpi_INCLUDES"
        AC_CHECK_HEADER(mpi.h, [], [AC_MSG_WARN([*** Can't find the LAM/MPI header files])])

fi

if [[ ! "$with_popt" = no ]]; then
        AC_MSG_WARN([The use of popt has been see to cause mysterious seg faults! RECOMMEND --without-popt!])
        AC_DEFINE([USE_POPT], [1], [Use the popt library])
        AC_CHECK_LIB(popt, poptGetContext, [], [])
        AC_CHECK_HEADER([popt.h], [], [])
fi

AC_CHECK_LIB(netcdf, ncopen, [
    LIBS="-lnetcdf $LIBS";
    AC_CHECK_HEADER([netcdf.h], [
        AC_DEFINE([USE_NETCDF], [1], [Use netCDF as a DataWriter])], [], 
                  [$with_netcdf_includes])], [], [$with_netcdf_libs])

AC_CHECK_LIB(hdf, Hopen, [
    LIBS="-lhdf $LIBS";
    AC_CHECK_HEADER([hdf.h], [
        AC_DEFINE([USE_HDF4], [1], [Use HDF4 as a DataWriter])], [], 
                  [$with_hdf4_includes])], [], [$with_hdf4_libs])

AC_CHECK_LIB(hdf5, H5open, [
    LIBS="-lhdf5 $LIBS";
    AC_CHECK_HEADER([hdf5.h], [
        AC_DEFINE([USE_HDF5], [1], [Use HDF5 as a DataWriter])], [], 
                  [$with_hdf5_includes])], [], [$with_hdf5_libs])

dnl Setup scripting
USE_PY_BINDINGS=0
if [[ ! -z "$with_python" ]] || [[ ! -z "$with_python_libs" ]] || [[ ! -z "$with_python_includes" ]]; then
        AC_CHECK_LIB(python2.3, Py_Initialize, [], [
            AC_MSG_ERROR(*** Can't find the Python libraries.)],
            [-L$with_python_libs])

        if [[ ! -z "$with_python_includes" ]]; then 
          CPPFLAGS="$CPPFLAGS -I$with_python_includes"
        fi
        AC_CHECK_HEADER([Python.h], [], [AC_MSG_ERROR([*** Can't find the Python header files])])

        if [[ ! -z "$with_boost_includes" ]]; then 
          CPPFLAGS="$CPPFLAGS -I$with_boost_includes"
        fi
        AC_CHECK_HEADER([boost/python.hpp], [], [AC_MSG_ERROR([*** Can't find the Boost Python header files])])

        USE_PY_BINDINGS=1
fi
AM_CONDITIONAL(PY_BINDINGS, test "x$USE_PY_BINDINGS" = "x1")

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h sys/param.h sys/time.h time.h sys/mkdev.h sys/sysmacros.h string.h memory.h fcntl.h dirent.h sys/ndir.h ndir.h alloca.h locale.h )


AC_HEADER_MAJOR
AC_FUNC_ALLOCA
AC_STRUCT_TM
AC_STRUCT_ST_BLOCKS
AC_FUNC_CLOSEDIR_VOID

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.

AC_SUBST(CFLAGS, $CFLAGS)
AC_SUBST(CXXFLAGS, $CXXFLAGS)
AC_SUBST(LIBS, $LIBS)

AC_OUTPUT(Makefile src/Makefile doc/Makefile tests/Makefile tests/high_speed_c/Makefile doc/Doxyfile doc/phred.lsm phred.spec)
