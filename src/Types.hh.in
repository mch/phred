/* 
   Phred - Phred is a parallel finite difference time domain
   electromagnetics simulator.

   Copyright (C) 2004-2005 Matt Hughes <mhughe@uvic.ca>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
*/

/* This file defines the types used for various things. This
 * is processed by autoconf so we can set types based on switches or
 * machine type.
 */

#include "config.h"

/* Use only C comments, or the AIX C compiler with complain */ 

#ifndef TYPES_H
#define TYPES_H

/**
 * Target platform 
 */ 
static const char *PLATFORM = "@target@";

/**
 * Indicators for CSG operations. 
 */
enum CSGStatus {
  INSIDE,
  BOUNDARY,
  OUTSIDE
};

/**
 * Multipliers used to get meters from a user's input. 
 */ 
static const float METER = 1.0;
static const float DECIMETER = 0.1;
static const float CENTIMETER = 1e-2;
static const float MILLIMETER = 1e-3;
static const float MICROMETER = 1e-6;
static const float NANOMETER = 1e-9;
static const float PICOMETER = 1e-12;
static const float FEMTOMETER = 1e-15;

/**
 * Axis of rotation
 */
enum Axis {
  X_AXIS,
  Y_AXIS, 
  Z_AXIS
};

/**
 * Things than can be stored in the grid's auxilary data map. 
 */
enum GridAuxData {
  PML_COMMON,
  UPML_COMMON,
  GPML_COMMON
};

/**
 * Boundary conditions. These can be appled to faces of the grid or to
 * the surfaces of materials. But normally just to the faces of the
 * grid. When adding a boundary condition, be sure to update
 * GridInfo::reorder_boundaries. 
 */
enum BoundaryCondition {
  UNKNOWN, /**< The boundary condition is unknown; non-sane. */
  SUBDOMAIN, /**< Means that the face is shared with another node */
  EWALL, /**< Electric wall */
  HWALL, /**< Magnetic wall */
  PML, /**< Perfectly matched layers (Berenger's absorbing boundary) */
  UPML, /**< Gedney's uniaxial PML */ 
  PERIODIC /**< Periodic boundary */ 
  /* MUR */ /**< 2nd order absorbing boundary condition */
  /* IMPEDANCE, */ /**< Imedance boundary */
};

/** 
 * Material types. Used by UPML to indicate the dispersion
 * calculation to use.
 */
enum MaterialType {
  PERF_COND = 0,  /**< Perfect conductor */
  DIELECTRIC = 2, /**< Lossless dielectric */  
  LOSSY = 4,      /**< Lossy dielectric */ 
  DEBYE = 8,      /**< Debye model */ 
  LORENTZ = 16,   /**< Lorentz model */ 
  DRUDE = 32      /**< Drude model (unmagnatized plasma) */ 
};

/**
 * Faces on the grid cube.
 */
enum Face {
  FRONT = 0, /**< x = dimx, YZ plane */
  BACK = 1, /**< x = 0, YZ plane */
  LEFT = 2, /**< y = 0, XZ plane */
  RIGHT = 3, /**< y = dimy, XZ plane */
  BOTTOM = 4, /**< z = 0, XY plane */
  TOP = 5 /**< z = dimz, XY plane */
};

#ifdef __cplusplus
/**
 * Converts a Face value to a human readable string
 */
const char *face_string(const Face f);
#endif

/**
 * Field components. Electric and magnetic
 */
enum FieldComponent {
  FC_EX,
  FC_EY,
  FC_EZ,
  FC_HX, 
  FC_HY, 
  FC_HZ, 
  FC_E, /* E field intensity */
  FC_H /* H field intensity */ 
};

#ifdef __cplusplus
/**
 * Converts a FieldComponent value to a human readable string
 */
const char *field_component_string(const FieldComponent f);
#endif

/**
 * Field types, E and H
 */
enum FieldType {
  E,
  H,
  BOTH
};

/**
 * Available domain decomposition algorithms.
 */ 
enum DomainDecompAlg {
  DDA_UNDEFINED, /**< The FDTD object chooses one based on #
                      processors */  
  DDA_SIMPLE,    /**< My simple algorithm, which only works for 1, 2,
                      4, and 8 processors */ 
  DDA_MPICART,   /**< Uses MPI functions to calculate the
                      decomposition, also attaches topology
                      information to the MPI communicator for more
                      effective process -> hardware mapping */ 
  DDA_STRIPING   /**< UNIMPLEMENTED algorithm, partitions in one plane
                      only along the longest grid dimension */ 
};

/**
 * This is the type used to iterate across loops. Strictly speaking, 
 * this should be unsigned, but some architectures need to have
 * it signed for vectorization to work. OpenMP on an RS/6000 SP
 * also required an signed int. 
 */ 
typedef signed int loop_idx_t;

/**
 * The type used to index material coefficients. Using a unsigned 
 * char reduces the amount of memory required, but limits the
 * number of materials to 256 (probably not a problem). 
 */ 
typedef unsigned char mat_idx_t;
#define MAT_IDX_MPI_TYPE MPI_UNSIGNED_CHAR

/**
 * The type used for material coefficients
 */
typedef float mat_coef_t; 

/**
 * The type used for material properties
 */
typedef float mat_prop_t;

/**
 * The type used for grid field components, THE MPI DATATYPE MUST MATCH!
 */
/* typedef float field_t; */
/* #define GRID_MPI_TYPE MPI_FLOAT */
typedef @FIELD_TYPE@ field_t;
#define GRID_MPI_TYPE @MPIFIELD_TYPE@

/**
 * The type used for grid spacings
 */
typedef @FIELD_TYPE@ delta_t;

/** \struct region
 * \brief Usually used to define a region of cells within the Grid. 
 * 
 * \bug When this structure is used in the code, the max values
 * generally refer to the cell *after* the end of the region, so that
 * loops can use < instead of <= in the condition. This is fine, but
 * it can make things hard to understand. All new uses of this
 * structure must treat the max values as the last cell in the
 * region and all new loop must use <= in the condition test. 
 */
typedef struct {
  unsigned int xmin;
  unsigned int xmax;
  unsigned int ymin;
  unsigned int ymax;
  unsigned int zmin;
  unsigned int zmax;
} region_t;

/** \struct update_region
 * \brief A calculated set of regions, one for each field component. 
 *
 * This structure groups together a set of region_t's, one for each
 * field component. This is needed because field components in a cell
 * will be outside of a region of interest, which sometimes may be
 * outside the available memory. This structure should be used rather
 * than hard coding indicies in the update loops because the
 * requirement may be different for grid vs. boundary conditions and
 * this allows more flexibility and less code reuse.
 */ 
typedef struct {
  region_t ex_;
  region_t ey_;
  region_t ez_;

  region_t hx_;
  region_t hy_;
  region_t hz_;
} update_region_t;

#ifdef __cplusplus
/**
 * Represents a point in real space. 
 */ 
class point
{
public:
  float x;
  float y;
  float z;

  point()
    : x(0), y(0), z(0)
  {}

  point(float xn, float yn, float zn)
    : x(xn), y(yn), z(zn)
  {}
};

/**
 * Represents a single point in the Grid. The class constructor makes it
 * easy to construct temporary objects for more terse syntax
 */
class grid_point
{
public:
  unsigned int x;
  unsigned int y;
  unsigned int z;

  grid_point()
    : x(0), y(0), z(0)
  {}

  grid_point(unsigned int xn, unsigned int yn, unsigned int zn)
    : x(xn), y(yn), z(zn)
  {}
};

#include <ostream>
std::ostream& operator<< (std::ostream& os, const point &p);
std::ostream& operator<< (std::ostream& os, const grid_point &p);
std::ostream& operator<< (std::ostream& os, const region_t &r);

#else
typedef struct {
  unsigned int x;
  unsigned int y;
  unsigned int z;
} grid_point;

typedef struct {
  float x;
  float y;
  float z;
} point;

#endif

#ifndef HAVE_ISNAN
/**
 * Kludge for missing isnan
 */ 
#define isnan(x) (x != x)
#endif

#ifndef HAVE_ISINF
/**
 * Kludge for missing isinf
 */
#define isinf(x) (isnan(x - x))
#endif

#endif // TYPES_HH

