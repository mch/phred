	phred - Phred is a parallel finite difference time domain
	electromagnetics simulator.



  Copyright (C) 2004 Matt Hughes

  phred is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Comments are welcome.

	- Matt Hughes <mhughe@uvic.ca>


USING PYTHON:

Python is a very powerful feature of Phred. Although Phred can be
used without Python, it is a very useful thing to compile in. Python
is known to work on Linux, Mac OS X, and AIX. If you install install
Python your self, be sure to 'make libinstall' and 'make
libpython2.3.so'. 'make altinstall' seems to be the only target that
actually installs the shared library in $PREFIX/lib. 

Phred uses Boost.Python (http://boost.org/) to bring the C++ and
Python languages together. Boost.Python is a sophisticated library
that depends on a number of modern C++ compiler features, so make
sure things are up to date. One thing about boost is that it is
somewhat of a pain to install, partly due to the use of their own
build tool, bjam. If you are compiling from source (download from
boost.org), you may need to compile bjam before you can start. 

cd boost/tools/build/jam_src/
./build.sh
cp bin.XXX SOME_BIN_DIR
cd ../../..
bjam -sTOOLS=gcc --layout=system --prefix=/opt/boost_OR_SOMETHING install

Phred expects to see 

On Minerva (an RS/6000 SP), I could not compile python because the
compiler version we have has a bug related to partial template
specialization which the Boost.Python glue library relies on. Recent
versions of Visual Age C++ should have fixed this, but the Minerva
admins are understandably reluctant to change things outside of their
normal upgrade cycle, so I'm stuck with a buggy version and cannot
test it. 


NOTE ON LICENCES:
This program optionally depends on a number of other software
packages which are available under a variety of licences. This affects
what licences phred may be made availble under, which is currently
only the GPL, but it could be made availble under other licences by
request. These are:

popt (command line option parsing), Lesser GNU Public Licence

netCDF (data file output), unknown

HDF (data file output), unknown

LAM/MPI (Message passing), under a special license which is probably
GPL compadible. 

MPICH (Message passing), under a special license which is probably
GPL compadible. 

Python, 

readline, GPL

Boost, Boost licence, GPL compadible AFAIK

THINGS TO DO:
There's a bunch of stuff that needs to be done, with respect to the
code organization and with respect to the FDTD itself. 

Some more though needs to go into the life cycle management of the
objects, who creates them, who owns them, how and when they are
destroyed, when they are considered "locked", and so on. Code clean up
and consistency checks are required. 

Parallel stuff:
- MPI fixups
- OpenMP
- AltiVec
- SSE2

FDTD stuff:
- Near to far field transformation
- Total scattered field formulation



Aix xlC_r optimize flags (from Blitz++):
-O3 -qstrict -Q -qansialias -qhot

-Q turns on inlining
-qstrict turns off optimizations that might alter program semantics 
-qhot turns on high order transformations; pad arrays etc to avoid
      cache misses, use vector library routines where possible
-qansialias Use type-based aliasing during optimization
